EBNF variant is EBNF for XML, with the difference of:
 '<CHAR1>' .. '<CHAR2>'
Is all of the unicode characters from the unicode value of CHAR1 to CHAR2 (including CHAR2)
The backslash is just a plain backslash, and omega is just little greek omega,
and the greek capitals are greek capitals

Number ::= '0' | '1'..'9' ('0'..'9')*
Var ::= ('A'..'Z'|'a'..'z') ('A'..'Z'|'a'..'z'|'0'..'9')*
Finite ::= '{}' | '{' Final (',' Final)* '}'
Infinite ::='{:}' | '{' Final ':' Final '}'
FunctionHead ::= Var (',' Var)* (',' Var '≝' Final)* | Var '≝' Final (',' Var '≝' Final)*
Function ::= '(' FunctionHead '↦' Final ')'
FunctionCall ::= Atom '(' Final (',' Final)*   ')'
Atom ::= Number | Var | Finite | Infinite | Function | FunctionCall | '(' Final ')' | '⌈' Final '⌉' | '[' Final ']' | '⌊' Final  '⌋'
UnaryS ::= '~' | '∔' | '∸' | '∁' | 'ℑ' | 'ℜ' | '∋' | 'ω'
Unary  ::= Atom | UnaryS Unary
Exp ::= Unary | Unary '^' Exp
MulS ::= '×' | '÷' | '%'
Mul ::= Exp | Mul MulS Exp
AddS ::= '+' | '-'
Add ::= Mul | Add AddS Mul
NumCS ::= '<' | '>' | '≤' | '≥'
NumCH ::= NumCS Add
NumC ::= Add NumCH*
NumES ::= '≟' | '≠'
NumEH ::= NumES NumC
NumE ::= NumC NumEH*
Int ::= NumE | Int '∩' NumE
UnionS ::= '\' | '∪'
Union ::= Int | Union UnionS Int
SetCS ::= '⊂' | '⊃' | '⊆' | '⊇' | '∈'
SetCH ::= SetCS Union
SetC ::= Union SetCH*
SetES ::= '≡' | '≢'
SetEH ::= SetES SetC
SetE ::= SetC SetEH*
And ::= SetE | And '∧' SetE
Or ::= And | Or '∨' And
Ite ::= Or | Or '→' Final '↛' Ite
FinalS ::= 'Π' | 'Σ'
Final ::= Ite | Var FinalS Final
Assgn ::= Var '=' Final
AssgnFn ::= Var '('FunctionHead ')' '=' Final
Line ::= Assgn | AssgnFn
Program ::= (Line ';')*
