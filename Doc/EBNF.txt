Uses python's variant of the EBNF notation
The backslash is a backslash, not an escaped quote!

Number ::= '0' | '1'..'9' ('0'..'9')*
Var ::= ('A'..'Z'|'a'..'z') ('A'..'Z'|'a'..'z'|'0'..'9')*
Finite ::= '{}' | '{' Final (',' Final)* '}'
Infinite ::='{:}' | '{' Final ':' Final '}'
FunctionHead ::= Var (',' Var)* (',' Var '=' Final)* | Var '=' Final (','Var'='Final')*
Function ::= '(' FunctionHead '↦' Final ')'
FunctionCall ::= Atom '(' (Final (',' Final)* ) + ')'
Atom ::= Number | Var | Finite | Infinite | Function | FunctionCall | '(' Final ')' | '⌈' Final '⌉' | '[' Final ']' | '⌊' Final  '⌋'
UnaryS ::= '~' | '∔' | '∸' | '∁' | 'ℑ' | 'ℜ' | '∋' | 'ω'
Unary  ::= Atom | UnaryS Unary
Exp ::= Unary | UnaryS '^' Exp
MulS ::= '×' | '÷' | '%'
Mul ::= Mul MulS Exp
AddS ::= '+' | '-'
Add ::= Mul | Add AddS Mul
NumCS ::= '<' | '>' | '≤' | '≥'
NumCH ::= NumCS Add
NumC ::= Add NumCH*
NumES ::= '≟' | '≠'
NumEH ::= NumES NumC
NumE ::= NumC NumEH*
Int ::= NumE | Int '∩' NumE
UnionS ::= '\' | '∪'
Union ::= Int | Union UnionS Int
SetCS ::= '⊂' | '⊃' | '⊆' | '⊇' | '∈'
SetCH ::= SetCS Union
SetC ::= Union SetCH*
SetES ::= '≡' | '≢'
SetEH ::= SetES SetC
SetE ::= SetC SetEH*
And ::= SetE | And '∧' SetE
Or ::= And | Or '∨' And
Ite ::= Or | Or '→' Ite '↛' Ite
FinalS ::= 'Π' | 'Σ'
Final ::= Ite | Var FinalS Final
Assgn ::= Var '=' Final
AssgnFn ::= Var FunctionHead '=' Final
Line ::= Assgn | AssgnFn | Final
Program ::= (Line ';'+)* (Line ';'*)?
